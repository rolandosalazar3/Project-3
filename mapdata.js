// Create function to adjust the size of dot according to number of UNDERGRAD STUDENTS.
function dotSize(Undergrad_Enrollment) {
	return Undergrad_Enrollment*5;
};


// Create function to adjust the size of dot according to number of TUITION.
function dotSize(TuitionFees) {
	return TuitionFees*5;
};





// Create function to adjust color of dot according to YEAR ESTABLISHED.
// Color palette generated by: https://hihayk.github.io/scale/#10/10/50/50/-51/74/20/25/FF9C00/255/151/0/white.
function dotColor(yearFounded) {
if (yearFounded >= 1620 && yearFounded < 1640) {
	color = "#51800B";
}
if (yearFounded >= 1640 && yearFounded < 1660) {
	color = "#638B0D";
}
if (yearFounded >= 1660 && yearFounded < 1680) {
	color = "#638B0D";
}
if (yearFounded >= 1680 && yearFounded < 1700) {
	color = "#76970F";
}
if (yearFounded >= 1700 && yearFounded < 1720) {
	color = "#8BA212";
}
if (yearFounded >= 1720 && yearFounded < 1740) {
	color = "#A0AE15";
}
if (yearFounded >= 1740 && yearFounded < 1760) {
	color = "#B7BA18";
}
if (yearFounded >= 1760 && yearFounded < 1780) {
	color = "#C5C51B";
}
if (yearFounded >= 1780 && yearFounded < 1800) {
	color = "#D1CA1F";
}
if (yearFounded >= 1800 && yearFounded < 1820) {
	color = "#DCC423";
}
if (yearFounded >= 1820 && yearFounded < 1840) {
	color = "#E8BE26";
}
if (yearFounded >= 1840 && yearFounded < 1860) {
	color = "#FF8A3F";
}
if (yearFounded >= 1860 && yearFounded < 1880) {
	color = "#FF7A47";
}
if (yearFounded >= 1880 && yearFounded < 1900) {
	color = "#FF6C4F";
}
if (yearFounded >= 1900 && yearFounded < 1920) {
	color = "#FF6057";
}
if (yearFounded >= 1920 && yearFounded < 1940) {
	color = "#FF606A";
}
if (yearFounded >= 1940 && yearFounded < 1960) {
	color = "#FF6884";
}
if (yearFounded >= 1960 && yearFounded < 1980) {
	color = "#FF719C";
}
if (yearFounded >= 1980 && yearFounded < 2000) {
	color = "#FF7AB3";
}
if (yearFounded >= 2000 && yearFounded < 2020) {
	color = "#FF83C8";
}
if (yearFounded >= 2020 && yearFounded < 2040) {
	color = "#FF8DDA";
};
return color;
};

// Create function to adjust color of dot according to RANK.
// Color palette generated by: https://hihayk.github.io/scale/#10/10/50/50/-51/74/20/25/FF9C00/255/151/0/white.
function dotColor(Rank_USNewsWorldReport) {
if (Rank_USNewsWorldReport >= 1 && Rank_USNewsWorldReport < 2) {
	color = "#51800B";
}
if (Rank_USNewsWorldReport >= 2 && Rank_USNewsWorldReport < 3) {
	color = "#859F11";
}
if (Rank_USNewsWorldReport >= 3 && Rank_USNewsWorldReport < 4) {
	color = "#BFBF1A";
}
if (Rank_USNewsWorldReport >= 4 && Rank_USNewsWorldReport < 5) {
	color = "#DFC323";
}
if (Rank_USNewsWorldReport >= 5 && Rank_USNewsWorldReport < 6) {
	color = "#FFAE2F";
}
if (Rank_USNewsWorldReport >= 6 && Rank_USNewsWorldReport < 7) {
	color = "#FF8740";
}
if (Rank_USNewsWorldReport >= 7 && Rank_USNewsWorldReport < 8) {
	color = "#FF6752";
}
if (Rank_USNewsWorldReport >= 8 && Rank_USNewsWorldReport < 9) {
	color = "#FF657A";
}
if (Rank_USNewsWorldReport >= 9 && Rank_USNewsWorldReport < 10) {
	color = "#FF78AF";
}
if (Rank_USNewsWorldReport >= 10 && Rank_USNewsWorldReport < 11) {
	color = "#FF8DDA";
};
return color;
};

// Create function to adjust color of dot according to TUITION.
// Color palette generated by: https://hihayk.github.io/scale/#10/10/50/50/-51/74/20/25/FF9C00/255/151/0/white.
function dotColor(TuitionFees) {
if (TuitionFees >= 1 && TuitionFees < 10000) {
	color = "#51800B";
}
if (TuitionFees >= 10000 && TuitionFees < 15000) {
	color = "#7A9910";
}
if (TuitionFees >= 15000 && TuitionFees < 20000) {
	color = "#A9B316";
}
if (TuitionFees >= 20000 && TuitionFees < 25000) {
	color = "#CCCB1D";
}
if (TuitionFees >= 25000 && TuitionFees < 30000) {
	color = "#E6BF26";
}
if (TuitionFees >= 30000 && TuitionFees < 35000) {
	color = "#FF8D3D";
}
if (TuitionFees >= 35000 && TuitionFees < 40000) {
	color = "#FF714C";
}
if (TuitionFees >= 40000 && TuitionFees < 45000) {
	color = "#FF5B5C";
}
if (TuitionFees >= 45000 && TuitionFees < 50000) {
	color = "#FF6B8C";
}
if (TuitionFees >= 50000 && TuitionFees < 55000) {
	color = "#FF7CB7";
}
if (TuitionFees >= 55000 && TuitionFees < 60000) {
	color = "#FF8DDA";
};
return color;
};





// Store API endpoint as queryUrl.
var queryUrl = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson";




// Perform a GET request to the query URL.
d3.json(queryUrl).then(data => {

  // Upon response, send the data.features object to the createFeatures function.
  createFeatures(data.features);

function createFeatures(schoolData) {

  // Define function to run for each feature in the features array.
  // Create a popup for each feature describing data.
  function onEachFeature(feature, layer) {
    layer.bindPopup("Name: " + feature.properties.place + "<br>Location: " + feature.properties.time + "," + " State:<br> Magnitude: " + feature.properties.mag + "<br> Depth (km): " + feature.geometry.coordinates[2]);
  }









// Create a SCHOOLS_RANK GeoJSON layer containing the features array on the schoolData.
  // Run onEachFeature once for each return on quake data.
  var schools_founded = L.geoJSON(schoolData, {
    onEachFeature: onEachFeature,
    pointToLayer: function (feature, lat, long) {
      return L.circleMarker(lat, long, {
        opacity: 1,
        fillOpacity: 0.5,
        fillColor: dotColor(feature.schools_founded[2]),
        color: "#000000",
        radius: 1,
        stroke: true,
        weight: 0.3
      })
    }
  });







  // Send quakes layer to createMap function.
  createMap(schools_founded);
}

function createMap(schools_founded) {

  // Create base layer.
  var streetMap = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  })

  var topoMap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
    attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
  });

  // Create baseMaps object.
  var baseMaps = {
    "Street Map": streetMap,
    "Topographic Map": topoMap
  };

  // Create overlay object.
  var overlayMap = {
    schools_founded: schools_founded
  };

  // Create map to load with streetmap and earthquakes layer, centered on geographic center of United States.
  var loadMap = L.map("map", {
    center: [
      44.58, -103.46
    ],
    zoom: 5,
    layers: [streetMap, schools_founded]
  });

  // Create a layer control and connect to the base and overlay maps.
  L.control.layers(baseMaps, overlayMap).addTo(loadMap);

  // Create map legend.
  var legend = L.control({ position: "bottomright" });
  legend.onAdd = function() {
    var div = L.DomUtil.create("div", "info legend");
      schools_founded = [1620, 1640, 1660, 1680, 1700, 1720, 1740, 1760, 1780, 1800, 1820, 1840, 1860, 1880, 1900, 1920, 1940, 1960, 1980, 2000, 2020, 2040];
    var colors = ["#51800B", "#638B0D","#638B0D","#76970F","#8BA212","#A0AE15","#B7BA18","#C5C51B","#D1CA1F","#DCC423","#E8BE26","#FF8A3F", "#FF7A47", "#FF6C4F", "#FF6057", "#FF606A", "#FF6884", "#FF6884", "#FF719C", "#FF7AB3", "#FF83C8", "#FF8DDA"]
    var labels = [];
    
    // Define minimum and maximum values.
    var legendLimits = "<h2 style='text-align: center'>Best Colleges</h2><h3 style='text-align: center'>RUS News & World Report</h3>" +
      "<div class=\"labels\">" +
      "<div class=\"min\">" + schools_founded[0] + "</div>" +
      "<div class=\"max\">" + schools_founded[schools_founded.length - 1] + "</div>" +
      "</div>";

      div.innerHTML = legendLimits;

      schools_founded.forEach(function(schools_founded, index) {
      labels.push("<li style=\"background-color: " + colors[index] + "\"></li>");
      });

      div.innerHTML += "<ul>" + labels.join("") + "</ul>";
      return div;
  };

  // Add legend to map.
  legend.addTo(loadMap);
}});

























  // Create a SCHOOLS_RANK GeoJSON layer containing the features array on the schoolData.
  // Run onEachFeature once for each return on quake data.
  var schools_rank = L.geoJSON(schoolData, {
    onEachFeature: onEachFeature,
    pointToLayer: function (feature, lat, long) {
      return L.circleMarker(lat, long, {
        opacity: 1,
        fillOpacity: 0.5,
        fillColor: dotColor(feature.Rank_USNewsWorldReport[2]),
        color: "#000000",
        radius: 1,
        stroke: true,
        weight: 0.3
      })
    }
  });







  // Send quakes layer to createMap function.
  createMap(schools_rank);
}

function createMap(schools_rank) {

  // Create base layer.
  var streetMap = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  })

  var topoMap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
    attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
  });

  // Create baseMaps object.
  var baseMaps = {
    "Street Map": streetMap,
    "Topographic Map": topoMap
  };

  // Create overlay object.
  var overlayMap = {
    schools_rank: schools_rank
  };

  // Create map to load with streetmap and earthquakes layer, centered on geographic center of United States.
  var loadMap = L.map("map", {
    center: [
      44.58, -103.46
    ],
    zoom: 5,
    layers: [streetMap, schools_rank]
  });

  // Create a layer control and connect to the base and overlay maps.
  L.control.layers(baseMaps, overlayMap).addTo(loadMap);

  // Create map legend.
  var legend = L.control({ position: "bottomright" });
  legend.onAdd = function() {
    var div = L.DomUtil.create("div", "info legend");
      rank = [1, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220];
    var colors = ["#51800B", "#7A9910","#A9B316","#CCCB1D","#E6BF26","#FFAE2F","#FF8D3D","#FF714C","#FF5B5C","#FF6B8C","#FF7CB7","#FF8DDA", "#FF8DDA"]
    var labels = [];
    
    // Define minimum and maximum values.
    var legendLimits = "<h2 style='text-align: center'>Best Colleges</h2><h3 style='text-align: center'>RUS News & World Report</h3>" +
      "<div class=\"labels\">" +
      "<div class=\"min\">" + Rank_USNewsWorldReport[0] + "</div>" +
      "<div class=\"max\">" + Rank_USNewsWorldReport[Rank_USNewsWorldReport.length - 1] + "</div>" +
      "</div>";

      div.innerHTML = legendLimits;

      Rank_USNewsWorldReport.forEach(function(Rank_USNewsWorldReport, index) {
      labels.push("<li style=\"background-color: " + colors[index] + "\"></li>");
      });

      div.innerHTML += "<ul>" + labels.join("") + "</ul>";
      return div;
  };

  // Add legend to map.
  legend.addTo(loadMap);
}});